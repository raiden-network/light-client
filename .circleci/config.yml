version: 2.1

templates:
  filter-tag-templates: &filter-version-regex
    tags:
      only: /^v\d+\.\d+\.\d+$/
    branches:
      ignore: /.*/

var_1: &docker_image circleci/node:12-browsers
var_2: &sdk_cache_key raiden-ts-{{ .Branch }}-{{ checksum "package-lock.json" }}
var_3: &dapp_cache_key raiden-dapp-{{ .Branch }}-{{ checksum "package-lock.json" }}
var_4: &sdk_working_dir ~/src/raiden-ts
var_5: &dapp_working_dir ~/src/raiden-dapp

anchor_1: &sdk_package_lock_key
  key: *sdk_cache_key

anchor_2: &attach_options
  at: ~/src/

anchor_3: &dapp_package_lock_key
  key: *dapp_cache_key

executors:
  base-executor:
    working_directory: ~/src
    docker:
      - image: *docker_image

  integration-executor:
    working_directory: ~/src
    docker:
      - image: raidennetwork/lightclient-integration:latest

jobs:
  checkout:
    executor: base-executor
    working_directory: ~/src
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - persist_to_workspace:
          root: .
          paths:
            - ./*

  check_licenses:
    executor: base-executor
    working_directory: ~/
    steps:
      - attach_workspace: *attach_options
      - run:
          name: Update $PATH
          command: echo 'export PATH=$PATH:$HOME/node_modules/.bin' >> $BASH_ENV
      - run:
          name: Install license checker
          command: npm install license-checker@25.0.1
      - run:
          name: Check SDK Licenses
          command: cd ~/src/raiden-ts && license-checker --production --onlyAllow 'MIT;BSD;Apache;MPL;LGPL;ZPL;ISC;WTFPL;Unlicense' --excludePackages 'uuid@2.0.1' --excludePrivatePackages # uuid@2.0.1 has an issue with the license information but it is licensed under MIT
      - run:
          name: Check dApp Licenses
          command: cd ~/src/raiden-dapp && license-checker --production --onlyAllow 'MIT;BSD;Apache;MPL;LGPL;ZPL;ISC;WTFPL;Unlicense' --excludePackages 'uuid@2.0.1' --excludePrivatePackages # uuid@2.0.1 has an issue with the license information but it is licensed under MIT

  install_sdk:
    executor: base-executor
    working_directory: *sdk_working_dir
    steps:
      - attach_workspace: *attach_options
      - restore_cache: *sdk_package_lock_key
      - run: npm ci
      - save_cache:
          <<: *sdk_package_lock_key
          paths:
            - "node_modules"
      - persist_to_workspace:
          root: ~/src
          paths:
            - ./*

  install_dapp:
    executor: base-executor
    working_directory: *dapp_working_dir
    steps:
      - attach_workspace: *attach_options
      - restore_cache: *sdk_package_lock_key
      - restore_cache: *dapp_package_lock_key
      - run: npm ci
      - save_cache:
          <<: *dapp_package_lock_key
          paths:
            - "node_modules"
      - persist_to_workspace:
          root: ~/src
          paths:
            - ./*

  lint_sdk:
    executor: base-executor
    working_directory: *sdk_working_dir
    steps:
      - attach_workspace: *attach_options
      - run: npm run lint

  lint_dapp:
    executor: base-executor
    working_directory: *dapp_working_dir
    steps:
      - attach_workspace: *attach_options
      - run: npm run lint:check

  test_sdk:
    executor: base-executor
    working_directory: *sdk_working_dir
    steps:
      - attach_workspace: *attach_options
      - run:
          name: Run unit tests
          command: npm run test -- --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: "reports/junit"
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit
      - run:
          name: "Upload coverage"
          command: cd .. && bash <(curl -s https://codecov.io/bash) -F sdk -C $CIRCLE_SHA1

  test_dapp:
    executor: base-executor
    working_directory: *dapp_working_dir
    steps:
      - attach_workspace: *attach_options
      - run:
          name: Run unit tests
          command: npm run test:unit -- --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: "reports/junit"
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit
      - run:
          name: "Upload coverage"
          command: cd .. && bash <(curl -s https://codecov.io/bash) -F dapp -C $CIRCLE_SHA1

  build_dapp:
    executor: base-executor
    working_directory: *dapp_working_dir
    steps:
      - attach_workspace: *attach_options
      - run: npm run build -- --mode ghpages
      - persist_to_workspace:
          root: ~/src
          paths:
            - ./*

  generate_documentation:
    executor: base-executor
    working_directory: *sdk_working_dir
    steps:
      - attach_workspace: *attach_options
      - run: cd ../docs && ./generate_documentation.sh
      - persist_to_workspace:
          root: ~/src/
          paths:
           - ./raiden-dapp/dist/docs

  deploy_gh_pages:
    executor: base-executor
    working_directory: *dapp_working_dir
    steps:
      - attach_workspace: *attach_options
      - add_ssh_keys:
          fingerprints:
            - "ed:c9:40:2a:96:6c:90:fd:46:18:2d:bf:8d:a8:a9:b3"
      - run: ./deploy.sh

  publish_artifact:
    executor: base-executor
    working_directory: *sdk_working_dir
    steps:
      - attach_workspace: *attach_options
      - run:
          name: Authenticate with registry
          command: echo "//registry.npmjs.org/:_authToken=$NPM_AUTH_TOKEN" > ~/.npmrc
      - run:
          name: Publish on npm
          command: npm publish

  integration_tests:
    executor: integration-executor
    working_directory: *sdk_working_dir
    steps:
      - attach_workspace: *attach_options
      - run:
          name: Restore dependencies
          command: npm ci
      - run:
          name: Run integration tests
          command: source /etc/profile.d/smartcontracts.sh && npm run test:integration -- --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: "reports/junit"
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit
      - run:
          name: "Upload coverage"
          command: cd .. && bash <(curl -s https://codecov.io/bash) -F sdk_integration -C $CIRCLE_SHA1

workflows:
  version: 2
  default_workflow:
    jobs:
      - checkout
      - install_sdk:
          requires:
            - checkout
      - install_dapp:
          requires:
            - checkout
            - install_sdk
      - check_licenses:
          requires:
            - install_sdk
            - install_dapp
      - lint_sdk:
          requires:
            - install_sdk
      - lint_dapp:
          requires:
            - install_dapp
      - build_dapp:
          requires:
            - install_dapp
          context: "Raiden-LC-Deploy"
      - test_sdk:
          requires:
            - lint_sdk
      - test_dapp:
          requires:
            - lint_dapp
            - build_dapp
      - deploy_gh_pages:
          requires:
            - test_dapp
          context: "Raiden-LC-Deploy"
          filters:
            branches:
              only:
                - master

  publish:
    jobs:
      - checkout:
          filters:
            <<: *filter-version-regex
      - install_sdk:
          requires:
            - checkout
          filters:
            <<: *filter-version-regex
      - install_dapp:
          requires:
            - install_sdk
          filters:
            <<: *filter-version-regex
      - build_dapp:
          requires:
            - install_dapp
          filters:
            <<: *filter-version-regex
      - generate_documentation:
          requires:
            - build_dapp
          filters:
            <<: *filter-version-regex
      - deploy_gh_pages:
          requires:
            - generate_documentation
          filters:
            <<: *filter-version-regex
      - publish_artifact:
          context: "Raiden Context"
          requires:
            - deploy_gh_pages
          filters:
            <<: *filter-version-regex

  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - checkout
      - integration_tests:
          requires:
            - checkout
