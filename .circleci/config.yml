version: 2.1

templates:
  filter-tag-templates: &filter-version-regex
    tags:
      only: /^v\d+\.\d+\.\d+$/
    branches:
      ignore: /.*/

var_1: &docker_image raidennetwork/lightclient-node-pnpm:latest
var_2: &cache_key raiden-{{ .Branch }}-{{ checksum "pnpm-lock.yaml" }}
var_3: &working_dir ~/src
var_4: &dapp_working_dir ~/src/raiden-dapp

anchor_1: &package_lock_key
  key: *cache_key

anchor_2: &attach_options
  at: ~/src/

executors:
  base-executor:
    working_directory: *working_dir
    docker:
      - image: *docker_image

  integration-executor:
    working_directory: ~/src
    docker:
      - image: raidennetwork/lightclient-integration:latest

jobs:
  checkout:
    executor: base-executor
    working_directory: *working_dir
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - persist_to_workspace:
          root: .
          paths:
            - ./*

  check_licenses:
    executor: base-executor
    working_directory: ~/
    steps:
      - attach_workspace: *attach_options
      - run:
          name: Update $PATH
          command: echo 'export PATH=$PATH:$HOME/node_modules/.bin' >> $BASH_ENV
      - run:
          name: Install license checker
          command: npm install license-checker@25.0.1
      - run:
          name: Check SDK Licenses
          command: cd ~/src/raiden-ts && license-checker --production --onlyAllow 'MIT;BSD;Apache;MPL;LGPL;ZPL;ISC;WTFPL;Unlicense' --excludePackages 'uuid@2.0.1' --excludePrivatePackages # uuid@2.0.1 has an issue with the license information but it is licensed under MIT
      - run:
          name: Check dApp Licenses
          command: cd ~/src/raiden-dapp && license-checker --production --onlyAllow 'MIT;BSD;Apache;MPL;LGPL;ZPL;ISC;WTFPL;Unlicense' --excludePackages 'uuid@2.0.1' --excludePrivatePackages # uuid@2.0.1 has an issue with the license information but it is licensed under MIT
      - run:
          name: Check CLI Licenses
          command: cd ~/src/raiden-cli && license-checker --production --onlyAllow 'MIT;BSD;Apache;MPL;LGPL;ZPL;ISC;WTFPL;Unlicense' --excludePackages 'uuid@2.0.1' --excludePrivatePackages # uuid@2.0.1 has an issue with the license information but it is licensed under MIT

  install:
    executor: base-executor
    working_directory: *working_dir
    steps:
      - attach_workspace: *attach_options
      - restore_cache: *package_lock_key
      - run: pnpm install --prefer-frozen-lockfile
      - save_cache:
          <<: *package_lock_key
          paths:
            - ~/.pnpm-store
      - persist_to_workspace:
          root: ~/src
          paths:
            - ./*

  lint:
    executor: base-executor
    working_directory: *working_dir
    steps:
      - attach_workspace: *attach_options
      - run: pnpm run lint -r

  test_sdk_unit:
    executor: base-executor
    working_directory: *working_dir
    steps:
      - attach_workspace: *attach_options
      - run:
          name: Run unit tests
          command: pnpm run test:unit --filter raiden-ts -- --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: "reports/junit"
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit
      - run:
          name: "Upload coverage"
          command: bash <(curl -s https://codecov.io/bash) -F sdk_unit -F sdk -C $CIRCLE_SHA1

  test_sdk_e2e:
    executor: base-executor
    working_directory: *working_dir
    steps:
      - attach_workspace: *attach_options
      - run:
          name: Run unit tests
          command: pnpm run test:e2e --filter raiden-ts -- --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: "reports/junit"
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit
      - run:
          name: "Upload coverage"
          command: bash <(curl -s https://codecov.io/bash) -F sdk_e2e -F sdk -C $CIRCLE_SHA1

  test_dapp:
    executor: base-executor
    working_directory: *working_dir
    steps:
      - attach_workspace: *attach_options
      - run:
          name: Run unit tests
          command: pnpm run test:unit --filter raiden-dapp -- --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: "reports/junit"
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit
      - run:
          name: "Upload coverage"
          command: bash <(curl -s https://codecov.io/bash) -F dapp -C $CIRCLE_SHA1

  build_dapp:
    executor: base-executor
    working_directory: *working_dir
    steps:
      - attach_workspace: *attach_options
      - run:
          name: Build dapp
          command: >
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              pnpm run build --filter raiden-dapp -- --mode ghpages;
            else
              pnpm run build --filter raiden-dapp -- --mode development;
            fi
      - run:
          name: Compress dapp
          command: cd raiden-dapp && tar -czvf dapp.tar.gz dist
      - store_artifacts:
          path: raiden-dapp/dapp.tar.gz
          destination: dapp.tar.gz
      - persist_to_workspace:
          root: ~/src
          paths:
            - ./*

  build_cli:
    executor: base-executor
    working_directory: *working_dir
    steps:
      - attach_workspace: *attach_options
      - run: pnpm run build --filter raiden-cli

  generate_documentation:
    executor: base-executor
    working_directory: *working_dir
    steps:
      - attach_workspace: *attach_options
      - run: cd docs && ./generate_documentation.sh
      - persist_to_workspace:
          root: ~/src/
          paths:
           - ./raiden-dapp/dist/docs

  deploy_gh_pages:
    executor: base-executor
    working_directory: *dapp_working_dir
    steps:
      - attach_workspace: *attach_options
      - add_ssh_keys:
          fingerprints:
            - "ed:c9:40:2a:96:6c:90:fd:46:18:2d:bf:8d:a8:a9:b3"
      - run: ./deploy.sh

  publish_artifact:
    executor: base-executor
    working_directory: *working_dir
    steps:
      - attach_workspace: *attach_options
      - run:
          name: Authenticate with registry
          command: echo "//registry.npmjs.org/:_authToken=$NPM_AUTH_TOKEN" > ~/.npmrc
      - run:
          name: Publish on npm
          command: pnpm publish --filter raiden-ts

  integration_tests:
    executor: integration-executor
    working_directory: *working_dir
    steps:
      - attach_workspace: *attach_options
      - run:
          name: Restore dependencies
          command: pnpm install
      - run:
          name: Run integration tests
          command: source /etc/profile.d/smartcontracts.sh && pnpm run test:integration --filter raiden-ts -- --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: "reports/junit"
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit
      - run:
          name: "Upload coverage"
          command: bash <(curl -s https://codecov.io/bash) -F sdk_integration -C $CIRCLE_SHA1

workflows:
  version: 2
  default_workflow:
    jobs:
      - checkout
      - install:
          requires:
            - checkout
      - check_licenses:
          requires:
            - install
      - lint:
          requires:
            - install
      - build_dapp:
          requires:
            - install
          context: "Raiden-LC-Deploy"
      - build_cli:
          requires:
            - install
      - test_sdk_e2e:
          requires:
            - install
      - test_sdk_unit:
          requires:
            - install
      - test_dapp:
          requires:
            - build_dapp
      - deploy_gh_pages:
          requires:
            - test_dapp
          context: "Raiden-LC-Deploy"
          filters:
            branches:
              only:
                - master

  publish:
    jobs:
      - checkout:
          filters:
            <<: *filter-version-regex
      - install:
          requires:
            - checkout
          filters:
            <<: *filter-version-regex
      - build_dapp:
          requires:
            - install
          filters:
            <<: *filter-version-regex
      - generate_documentation:
          requires:
            - build_dapp
          filters:
            <<: *filter-version-regex
      - deploy_gh_pages:
          requires:
            - generate_documentation
          filters:
            <<: *filter-version-regex
      - publish_artifact:
          context: "Raiden Context"
          requires:
            - deploy_gh_pages
          filters:
            <<: *filter-version-regex

  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - checkout
      - integration_tests:
          requires:
            - checkout
