version: 2.1

parameters:
  base_docker_image:
    type: string
    default: cimg/node:lts-browsers

  e2e_environment_docker_image:
    type: string
    default: raidennetwork/lightclient-e2e-environment:v1.1.4

  working_directory:
    type: string
    default: ~/src

  test_report_directory:
    type: string
    default: reports/junit

anchor_1: &attach_options
  at: << pipeline.parameters.working_directory >>

anchor_2: &filter_release_tag
  filters:
    tags:
      only: /^v\d+\.\d+\.\d+$/

anchor_3: &executor_shared_options
  working_directory: << pipeline.parameters.working_directory >>
  environment:
    JEST_JUNIT_OUTPUT_DIR: << pipeline.parameters.test_report_directory >>

anchor_4: &workspace_parameter
  workspace:
    description: The yarn workspace to target
    type: enum
    enum: ['raiden-ts', 'raiden-dapp', '@raiden_network/raiden-cli']

executors:
  base-executor:
    <<: *executor_shared_options
    docker:
      - image: << pipeline.parameters.base_docker_image >>

  e2e-environment-executor:
    <<: *executor_shared_options
    docker:
      - image: << pipeline.parameters.base_docker_image >>
      - image: << pipeline.parameters.e2e_environment_docker_image >>

commands:
  upload_test_results_and_coverage:
    parameters:
      <<: *workspace_parameter
      test_kind_flag:
        type: enum
        enum: [unit, integration, e2e]
    steps:
      - store_test_results:
          path: << pipeline.parameters.test_report_directory >>
      - store_artifacts:
          path: << pipeline.parameters.test_report_directory >>
      - run:
          name: Upload test coverage results to CodeCov
          command: >
            bash <(curl -s https://codecov.io/bash) -C $CIRCLE_SHA1
            -F << parameters.workspace >>
            -F << parameters.workspace >>.<< parameters.test_kind_flag >>

jobs:
  install:
    executor: base-executor
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - raiden-v5-yarn-{{ checksum "yarn.lock" }}
            - raiden-v5-yarn-
      - run: yarn install
      - save_cache:
          name: Save Yarn Package Cache
          key: raiden-v5-yarn-{{ checksum "yarn.lock" }}
          paths:
            - ./node_modules
            - ~/.cache # Cypress stores its stuff here.
      - persist_to_workspace:
          root: << pipeline.parameters.working_directory >>
          paths:
            - ./*

  build:
    executor: base-executor
    parameters:
      <<: *workspace_parameter
      additional_arguments:
        description: Additional arguments that get attached to the end of the build command
        type: string
        default: ""
    steps:
      - attach_workspace: *attach_options
      - run:
          name: Build
          command: yarn workspace << parameters.workspace >> build << parameters.additional_arguments >>
      - run:
          name: Archive and compress
          command: >
            tar --create --gzip --verbose --file $(basename << parameters.workspace >>).tgz
            ./$(basename << parameters.workspace >>)/dist*
      - store_artifacts:
          path: << parameters.workspace >>.tgz
      - persist_to_workspace:
          root: << pipeline.parameters.working_directory >>
          paths:
            - ./*

  lint:
    executor: base-executor
    parameters:
      <<: *workspace_parameter
    steps:
      - attach_workspace: *attach_options
      - run: yarn workspace << parameters.workspace >> lint

  test_unit:
    executor: base-executor
    parameters:
       <<: *workspace_parameter
    steps:
      - attach_workspace: *attach_options
      - run:
          name: Run unit tests
          command: yarn workspace << parameters.workspace >> test:unit --ci --runInBand
      - upload_test_results_and_coverage:
          workspace: << parameters.workspace >>
          test_kind_flag: unit

  test_integration:
    executor: base-executor
    parameters:
       <<: *workspace_parameter
    steps:
      - attach_workspace: *attach_options
      - run:
          name: Run integration tests
          command: yarn workspace << parameters.workspace >> test:integration --ci --runInBand
      - upload_test_results_and_coverage:
          workspace: << parameters.workspace >>
          test_kind_flag: integration

  test_e2e:
    executor: e2e-environment-executor
    parameters:
      <<: *workspace_parameter
      additional_arguments:
        description: Additional arguments that get attached to the end of the test command
        type: string
        default: ""
    steps:
      - attach_workspace: *attach_options
      - run:
          name: Run end-to-end tests for
          command: yarn workspace << parameters.workspace >> test:e2e:docker << parameters.additional_arguments >>
          no_output_timeout: 60m
      - upload_test_results_and_coverage:
          workspace: << parameters.workspace >>
          test_kind_flag: e2e
      - store_test_results:
          path: tests/e2e/results

  generate_documentation:
    executor: base-executor
    steps:
      - attach_workspace: *attach_options
      - run:
          name: Generate SDK docs
          command: >
            yarn workspace raiden-ts run docs &&
            cp -vr ./raiden-ts/docs ./raiden-dapp/dist/
      - persist_to_workspace:
          root: << pipeline.parameters.working_directory >>
          paths:
            - ./raiden-dapp/dist/docs

  deploy_gh_pages:
    parameters:
      public_path:
        description: The public path where to reach deployment (must be correct according to the build mode)
        type: string
    executor: base-executor
    working_directory: << pipeline.parameters.working_directory >>/raiden-dapp
    steps:
      - attach_workspace: *attach_options
      - add_ssh_keys:
          fingerprints:
            - 'ed:c9:40:2a:96:6c:90:fd:46:18:2d:bf:8d:a8:a9:b3'
      - run: ./deploy.sh << parameters.public_path >>

  publish:
    executor: base-executor
    parameters:
      <<: *workspace_parameter
    steps:
      - attach_workspace: *attach_options
      - run:
          name: Authenticate on NPM registry
          command: echo "//registry.npmjs.org/:_authToken=$NPM_AUTH_TOKEN" > ~/.npmrc
      - run:
          name: Publish on NPM registry
          command: yarn workspace << parameters.workspace >> publish --no-git-tag-version --non-interactive

workflows:
  version: 2
  default_workflow:
    when:
      not:
        equal: [master, << pipeline.git.branch >>]

    jobs:
      - install
      - build:
          name: build raiden-ts
          workspace: raiden-ts
          requires: [ 'install' ]
      - build:
          name: build raiden-dapp
          workspace: raiden-dapp
          additional_arguments: --mode development
          requires: [ 'build raiden-ts' ]
      - lint:
          name: lint raiden-ts
          workspace: raiden-ts
          requires: [ 'install' ]
      - lint:
          name: lint raiden-dapp
          workspace: raiden-dapp
          requires: [ 'build raiden-ts' ]
      - lint:
          name: lint raiden-cli
          workspace: '@raiden_network/raiden-cli'
          requires: [ 'build raiden-ts' ]
      - build:
          name: build raiden-cli
          workspace: '@raiden_network/raiden-cli'
          requires: [ 'build raiden-ts' ]
      - test_unit:
          name: test unit raiden-ts
          workspace: raiden-ts
          requires: [ 'install' ]
      - test_unit:
          name: test unit raiden-dapp
          workspace: raiden-dapp
          requires: [ 'build raiden-ts' ]
      - test_integration:
          name: test integration raiden-ts
          workspace: raiden-ts
          requires: [ 'install' ]
      - test_e2e:
          name: test end-to-end raiden-ts
          workspace: raiden-ts
          additional_arguments: --ci --runInBand
          requires: [ 'install' ]
      - test_e2e:
          name: test end-to-end raiden-dapp
          workspace: raiden-dapp
          requires: [ 'build raiden-ts' ]

  publish_staging:
    when:
      equal: [master, << pipeline.git.branch >>]

    jobs:
      - install
      - build:
          name: build raiden-ts
          workspace: raiden-ts
          requires: [ 'install' ]
      - build:
          name: build raiden-dapp
          workspace: raiden-dapp
          additional_arguments: --mode staging
          requires: [ 'build raiden-ts' ]
      - test_unit:
          name: test unit raiden-ts
          workspace: raiden-ts
          requires: [ 'install' ]
      - test_unit:
          name: test unit raiden-dapp
          workspace: raiden-dapp
          requires: [ 'build raiden-ts' ]
      - test_integration:
          name: test integration raiden-ts
          workspace: raiden-ts
          requires: [ 'install' ]
      - test_e2e:
          name: test end-to-end raiden-ts
          workspace: raiden-ts
          additional_arguments: --ci --runInBand
          requires: [ 'install' ]
      - test_e2e:
          name: test end-to-end raiden-dapp
          workspace: raiden-dapp
          requires: [ 'build raiden-ts' ]
      - deploy_gh_pages:
          public_path: /staging
          requires: [ 'build-raiden-dapp' , 'test unit raiden-dapp', 'test end-to-end raiden-dapp' ]

  publish_production:
    when:
      and:
        - not: << pipeline.git.branch >>
        - << pipeline.git.tag >>

    # Note:
    # In constrast to branches, each job that should run on a pipeline triggered
    # by a new tag must use a tag filter. Else the job does not get executed, no
    # matter its dependencies or anything else.
    jobs:
      - install:
          <<: *filter_release_tag
      - build:
          <<: *filter_release_tag
          name: build raiden-ts
          workspace: raiden-ts
          requires: [ 'install' ]
      - build:
          <<: *filter_release_tag
          name: build raiden-dapp
          workspace: raiden-dapp
          additional_arguments: --mode production
          requires: [ 'build raiden-ts' ]
      - generate_documentation:
          <<: *filter_release_tag
          requires: [ 'build raiden-dapp' ]
      - deploy_gh_pages:
          <<: *filter_release_tag
          public_path: /
          requires: [ 'build raiden-dapp' , 'generate_documentation' ]
      - publish:
          <<: *filter_release_tag
          name: publish raiden-ts on NPM registry
          context: 'Raiden Context'
          workspace: raiden-ts
          requires: [ 'build raiden-ts' ]
      - publish:
          <<: *filter_release_tag
          name: publish raiden-cli on NPM registry
          context: 'Raiden Context'
          workspace: '@raiden_network/raiden-cli'
          requires: [ 'build raiden-cli' ]
