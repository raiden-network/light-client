version: 2.1

parameters:
  base_executor_image:
    type: string
    default: cimg/node:lts-browsers

  e2e_environment_executor_image:
    type: string
    default: raidennetwork/lightclient-e2e-environment:latest

  working_directory:
    type: string
    default: ~/src

  test_report_directory:
    type: string
    default: reports/junit

anchor_1: &attach_options
  at: << pipeline.parameters.working_directory >>

anchor_2: &executor_parameter
  parameters:
    executor:
      type: executor
      default: base-executor

anchor_3: &executor_shared_options
  working_directory: << pipeline.parameters.working_directory >>
  environment:
    JEST_JUNIT_OUTPUT_DIR: << pipeline.parameters.test_report_directory >>

anchor_4: &filter_release_tag
  filters:
    tags:
      only: /^v\d+\.\d+\.\d+$/

executors:
  base-executor:
    <<: *executor_shared_options
    docker:
      - image: << pipeline.parameters.base_executor_image >>

  e2e-environment-executor:
    <<: *executor_shared_options
    docker:
      - image: << pipeline.parameters.e2e_environment_executor_image >>

commands:
  check-license:
    parameters:
      directory:
        description: The sub-directory at the working directory where to check for licenses
        type: string
    steps:
      - run:
          name: Check License for << parameters.directory >>
          working_directory: << pipeline.parameters.working_directory>>/<< parameters.directory >>
          command: >
            npx license-checker@25.0.1
            --production
            --onlyAllow 'MIT;BSD;Apache;MPL;LGPL;ZPL;ISC;WTFPL;Unlicense'
            --excludePrivatePackages # uuid@2.0.1 has an issue with the license information but it is licensed under MIT

  upload_test_results_and_coverage:
    parameters:
      base_flag:
        type: enum
        enum: [sdk, dapp, cli]
      test_kind_flag:
        type: enum
        enum: [unit, integration, e2e]
    steps:
      - store_test_results:
          path: << pipeline.parameters.test_report_directory >>
      - store_artifacts:
          path: << pipeline.parameters.test_report_directory >>
      - run:
          name: Upload test coverage results to CodeCov
          command: >
            bash <(curl -s https://codecov.io/bash) -C $CIRCLE_SHA1
            -F << parameters.base_flag >>
            -F << parameters.base_flag >>.<< parameters.test_kind_flag >>

jobs:
  install:
    <<: *executor_parameter
    executor: << parameters.executor >>
    working_directory: << pipeline.parameters.working_directory >>
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - raiden-v1-yarn-{{ checksum "yarn.lock" }}
            - raiden-v1-yarn-
      - run: yarn install
      - save_cache:
          name: Save Yarn Package Cache
          key: raiden-v1-yarn-{{ checksum "yarn.lock" }}
          paths:
            - ./node_modules
            - ~/.cache # Cypress stores its stuff here.
      - persist_to_workspace:
          root: << pipeline.parameters.working_directory >>
          paths:
            - ./*

  check_licenses:
    executor: base-executor
    working_directory: ~/
    steps:
      - attach_workspace: *attach_options
      - check-license:
          directory: raiden-ts
      - check-license:
          directory: raiden-dapp
      - check-license:
          directory: raiden-cli

  build_sdk:
    <<: *executor_parameter
    executor: << parameters.executor >>
    working_directory: << pipeline.parameters.working_directory >>/raiden-ts
    steps:
      - attach_workspace: *attach_options
      - run: yarn build
      - persist_to_workspace:
          root: << pipeline.parameters.working_directory >>
          paths:
            - ./*

  build_dapp:
    parameters:
      mode:
        description: Mode to configure the environment of the dApp build
        type: enum
        enum: [production, staging, development, e2e, raiden-package]
    executor: base-executor
    working_directory: << pipeline.parameters.working_directory >>/raiden-dapp
    steps:
      - attach_workspace: *attach_options
      - run:
          name: Build dapp
          command: yarn build --mode << parameters.mode >>
      - run:
          name: Compress dapp
          command: tar -czvf dapp.tar.gz dist
      - store_artifacts:
          path: dapp.tar.gz
      - persist_to_workspace:
          root: << pipeline.parameters.working_directory >>
          paths:
            - ./*

  build_cli:
    executor: base-executor
    working_directory: << pipeline.parameters.working_directory >>/raiden-cli
    steps:
      - attach_workspace: *attach_options
      - run:
          name: Build CLI
          command: yarn run build
      - run:
          name: Bundle CLI
          command: yarn run build:bundle
      - run:
          name: Compress CLI bundle
          command: >
            cp -av ./raiden bundle/ ;
            tar -czvf raiden-cli.tar.gz bundle --transform='s/^bundle/raiden-cli/'
      - store_artifacts:
          path: raiden-cli.tar.gz

  lint:
    working_directory: << pipeline.parameters.working_directory >>
    executor: base-executor
    steps:
      - attach_workspace: *attach_options
      - run: yarn lint

  test_sdk_unit:
    executor: base-executor
    working_directory: << pipeline.parameters.working_directory >>/raiden-ts
    steps:
      - attach_workspace: *attach_options
      - run:
          name: Run unit tests
          command: yarn run test:unit --ci --runInBand
      - upload_test_results_and_coverage:
          base_flag: sdk
          test_kind_flag: unit

  test_sdk_integration:
    executor: base-executor
    working_directory: << pipeline.parameters.working_directory >>/raiden-ts
    steps:
      - attach_workspace: *attach_options
      - run:
          name: Run integration tests
          command: yarn run test:integration --ci --runInBand
      - upload_test_results_and_coverage:
          base_flag: sdk
          test_kind_flag: integration

  test_sdk_e2e:
    executor: e2e-environment-executor
    working_directory: << pipeline.parameters.working_directory >>/raiden-ts
    steps:
      - attach_workspace: *attach_options
      - run:
          name: Run end-to-end tests
          command: >
            source /etc/profile.d/smartcontracts.sh &&
            yarn run test:e2e --ci --runInBand
      - upload_test_results_and_coverage:
          base_flag: sdk
          test_kind_flag: e2e

  test_dapp_unit:
    executor: base-executor
    working_directory: << pipeline.parameters.working_directory >>/raiden-dapp
    steps:
      - attach_workspace: *attach_options
      - run:
          name: Run unit tests
          command: yarn run test:unit --ci --runInBand
      - upload_test_results_and_coverage:
          base_flag: dapp
          test_kind_flag: unit

  test_dapp_e2e:
    executor: e2e-environment-executor
    working_directory: << pipeline.parameters.working_directory >>/raiden-dapp
    steps:
      - attach_workspace: *attach_options
      - run:
          name: Run e2e tests
          command: yarn run test:e2e --headless
      # TODO: Check how we can make this unified with how other jobs upload
      # the test results (overwrite Cypress directory config via cli parameters)
      - store_test_results:
          path: tests/e2e/results/reports
      - store_artifacts:
          path: tests/e2e/results/videos
      - store_artifacts:
          path: tests/e2e/results/screenshots

  generate_documentation:
    executor: base-executor
    working_directory: << pipeline.parameters.working_directory >>
    steps:
      - attach_workspace: *attach_options
      - run:
          working_directory: docs
          command: ./generate_documentation.sh
      - persist_to_workspace:
          root: << pipeline.parameters.working_directory >>
          paths:
            - ./raiden-dapp/dist/docs

  deploy_gh_pages:
    parameters:
      public_path:
        description: The public path where to reach deployment (must be correct according to the build mode)
        type: string
    executor: base-executor
    working_directory: << pipeline.parameters.working_directory >>/raiden-dapp
    steps:
      - attach_workspace: *attach_options
      - add_ssh_keys:
          fingerprints:
            - "ed:c9:40:2a:96:6c:90:fd:46:18:2d:bf:8d:a8:a9:b3"
      - run: ./deploy.sh << parameters.public_path >>

  publish_artifact:
    executor: base-executor
    working_directory: << pipeline.parameters.working_directory >>/raiden-ts
    steps:
      - attach_workspace: *attach_options
      - run:
          name: Authenticate with registry
          command: echo "//registry.npmjs.org/:_authToken=$NPM_AUTH_TOKEN" > ~/.npmrc
      - run:
          name: Publish on npm
          command: yarn publish

workflows:
  version: 2
  default_workflow:
    when:
      not:
        equal: [master, << pipeline.git.branch >>]

    jobs:
      - install
      - check_licenses:
          requires:
            - install
      - build_sdk:
          requires:
            - install
      - build_dapp:
          mode: development
          requires:
            - build_sdk
      - build_cli:
          requires:
            - build_sdk
      - lint:
          requires:
            - build_sdk
      - test_sdk_unit:
          requires:
            - build_sdk
      - test_sdk_integration:
          requires:
            - build_sdk
      - test_dapp_unit:
          requires:
            - build_dapp

  publish_staging:
    when:
      equal: [master, << pipeline.git.branch >>]

    jobs:
      - install
      - build_sdk:
          requires:
            - install
      - build_dapp:
          mode: staging
          requires:
            - build_sdk
      - test_sdk_unit:
          requires:
            - build_sdk
      - test_sdk_integration:
          requires:
            - build_sdk
      - test_dapp_unit:
          requires:
            - build_dapp
      - deploy_gh_pages:
          public_path: /staging
          requires:
            - build_dapp

  publish_production:
    when:
      and:
        - not: << pipeline.git.branch >>
        - << pipeline.git.tag >>

    # Note:
    # In constrast to branches, each job that should run on a pipeline triggered
    # by a new tag must use a tag filter. Else the job does not get executed, no
    # matter its dependencies or anything else.
    jobs:
      - install:
          <<: *filter_release_tag
      - build_sdk:
          <<: *filter_release_tag
          requires:
            - install
      - build_dapp:
          <<: *filter_release_tag
          mode: production
          requires:
            - build_sdk
      - generate_documentation:
          <<: *filter_release_tag
          requires:
            - build_dapp
      - deploy_gh_pages:
          <<: *filter_release_tag
          public_path: /
          requires:
            - generate_documentation
      - publish_artifact:
          <<: *filter_release_tag
          context: "Raiden Context"
          requires:
            - deploy_gh_pages

  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master

    jobs:
      - install:
          executor: e2e-environment-executor
      - build_sdk:
          executor: e2e-environment-executor
          requires:
            - install
      - test_sdk_e2e:
          requires:
            - build_sdk
      - test_dapp_e2e:
          requires:
            - build_sdk
